・VSCode プラグイン
go

Ctrl-Shift-P Install/Update Tools 全部チェックを入れてインストール
Ctrl-Shift-P Get Package importで記載したモジュールをインストールする

・バイナリ作成
go install (src配下のディレクトリ名)

・テスト実行
※ソースとテストファイルのディレクトリに移動すること

（テスト実行）
go test

(テスト実行_結果詳細)
go test -v

（テスト実行_カバレッジ出力）
go test -cover

（特定のテストのブロックを実行する）
go test -short
以下のブロック内を実行する
if testing.Short() {}

（テスト実行_並列実行）
go test --paralell 3
testing.T.parallel呼び出しのあるテストを並列実行する。

（テスト実行_ベンチマーク）
「-run x」で機能テストの実行を抑止する
go test -run x -bench .

setting.json
{
    // GOPATH環境変数の設定
    "go.gopath": "/root/go/web_api_go"
}

・テスト実行（gocheck）

(gocheckの導入)
go get gopkg.in/check.v1

(テスト実行)
go test -check.vv (パッケージのパス src以下のパス)/...
※go testまでは標準テスト機能。
-check.vvはgocheckに関するオプションで、テスト結果を詳細表示する。


・テスト実行（ginkgo）
（ginkgoの導入）
go get github.com/onsi/ginkgo/ginkgo

（テストスイートファイルの作成）
ginkgo bootstrap

（テストケースファイルの作成）
ginkgo generate

（テスト実行）
ginkgo -v （パッケージディレクトリのパス ex. src/github.com/xxx/yyy/zzz）


・ライブラリ作成
（ライブラリの実装）
作業ディレクトリを作成する。
ライブラリのビルド(githubに公開する場合)
go build domain/username/dirname
ライブラリのプッシュ(githubに公開する場合)
http(s)://domain/username/dirname.git

・パッケージ管理
（パッケージ管理のインストール）
go get -u github.com/golang/dep/cmd/dep

（パッケージ管理をプロジェクトに導入する）
cd （プロジェクトのディレクトリ）
dep init
dep ensure
※上記のコマンド実行により、パッケージをダウンロードする。


・Postgres
[postgresql.conf]
listen_addresses = '*'

[pg_hba.conf]
local   all             all                                     peer ->(fix)-> md5
host    all             all             0.0.0.0/0               md5